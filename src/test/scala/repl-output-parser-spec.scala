package wrap

import org.scalatest.{PropSpec, Matchers}
import org.scalatest.prop.{PropertyChecks, TableDrivenPropertyChecks}

import atto.ParseResult.Done

class ReplOutputParserSpec extends PropSpec with Matchers with PropertyChecks with TableDrivenPropertyChecks {

  val examples = Table(
    ( "Input"                             , "Expected Output" ),

    ( "import slick.driver.H2Driver.api._", Import("slick.driver.H2Driver.api._") ),

    ( "defined class Message"             , CaseClass("Message") ),

    ( "freshTestData: Seq[Message]"       , Method("freshTestData",  Type("Seq", Type("Message") :: Nil))  ),

    ( "messages: slick.lifted.TableQuery[MessageTable] = Rep(TableExpansion)" ,
      Value("messages", Type("slick.lifted.TableQuery", Type("MessageTable") :: Nil), "Rep(TableExpansion)") ),

    ( "db: slick.driver.H2Driver.backend.Database = slick.jdbc.JdbcBackend$DatabaseDef@68b11cb9" ,
      Value("db", Type("slick.driver.H2Driver.backend.Database"), "slick.jdbc.JdbcBackend$DatabaseDef@68b11cb9") ),

    ( "halSays: slick.lifted.Query[MessageTable,MessageTable#TableElementType,Seq] = Rep(Filter)",
      Value(
        "halSays",
        Type("slick.lifted.Query", Type("MessageTable") :: Type("MessageTable#TableElementType") :: Type("Seq") :: Nil),
        "Rep(Filter)") ),

    ( """res0: String = create table "message" ("sender" VARCHAR NOT NULL,"content" VARCHAR NOT NULL,"id" BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY)""" ,
       Value("res0", Type("String"), """create table "message" ("sender" VARCHAR NOT NULL,"content" VARCHAR NOT NULL,"id" BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY)""") ),

    ( "res2: Seq[MessageTable#TableElementType] = Vector(Message(Dave,Hello, HAL. Do you read me, HAL?,1), Message(HAL,Affirmative, Dave. I read you.,2), Message(Dave,Open the pod bay doors, HAL.,3), Message(HAL,I'm sorry, Dave. I'm afraid I can't do that.,4))",
       Value(
         "res2",
         Type("Seq", Type("MessageTable#TableElementType") :: Nil),
         "Vector(Message(Dave,Hello, HAL. Do you read me, HAL?,1), Message(HAL,Affirmative, Dave. I read you.,2), Message(Dave,Open the pod bay doors, HAL.,3), Message(HAL,I'm sorry, Dave. I'm afraid I can't do that.,4))") ),

    ( "actions: slick.dbio.DBIOAction[Seq[MessageTable#TableElementType],slick.dbio.Streaming[MessageTable#TableElementType],slick.dbio.Effect.Schema with slick.dbio.Effect.Write with slick.dbio.Effect.Read] = slick.dbio.SynchronousDatabaseAction$$anon$4@1e83b732",
       Value(
         "actions",
         Type("slick.dbio.DBIOAction", List(
           Type("Seq", Type("MessageTable#TableElementType") :: Nil) ,
           Type("slick.dbio.Streaming", Type("MessageTable#TableElementType") :: Nil),
           Type("slick.dbio.Effect.Schema with slick.dbio.Effect.Write with slick.dbio.Effect.Read")
          )
         ),
         "slick.dbio.SynchronousDatabaseAction$$anon$4@1e83b732")
       )

  )

  property("Can Parse Examples") {
    forAll (examples) { (in: String, expected: ReplExpr) =>
      ReplOutputParser.parse(in) shouldBe Done("", expected)
    }
  }
}